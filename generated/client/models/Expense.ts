
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Expense` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Expense
 * 
 */
export type ExpenseModel = runtime.Types.Result.DefaultSelection<Prisma.$ExpensePayload>

export type AggregateExpense = {
  _count: ExpenseCountAggregateOutputType | null
  _avg: ExpenseAvgAggregateOutputType | null
  _sum: ExpenseSumAggregateOutputType | null
  _min: ExpenseMinAggregateOutputType | null
  _max: ExpenseMaxAggregateOutputType | null
}

export type ExpenseAvgAggregateOutputType = {
  id: number | null
  amount: runtime.Decimal | null
  tripId: number | null
  budgetId: number | null
}

export type ExpenseSumAggregateOutputType = {
  id: number | null
  amount: runtime.Decimal | null
  tripId: number | null
  budgetId: number | null
}

export type ExpenseMinAggregateOutputType = {
  id: number | null
  amount: runtime.Decimal | null
  description: string | null
  category: $Enums.ExpenseCategory | null
  date: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  tripId: number | null
  budgetId: number | null
}

export type ExpenseMaxAggregateOutputType = {
  id: number | null
  amount: runtime.Decimal | null
  description: string | null
  category: $Enums.ExpenseCategory | null
  date: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  tripId: number | null
  budgetId: number | null
}

export type ExpenseCountAggregateOutputType = {
  id: number
  amount: number
  description: number
  category: number
  date: number
  createdAt: number
  updatedAt: number
  tripId: number
  budgetId: number
  _all: number
}


export type ExpenseAvgAggregateInputType = {
  id?: true
  amount?: true
  tripId?: true
  budgetId?: true
}

export type ExpenseSumAggregateInputType = {
  id?: true
  amount?: true
  tripId?: true
  budgetId?: true
}

export type ExpenseMinAggregateInputType = {
  id?: true
  amount?: true
  description?: true
  category?: true
  date?: true
  createdAt?: true
  updatedAt?: true
  tripId?: true
  budgetId?: true
}

export type ExpenseMaxAggregateInputType = {
  id?: true
  amount?: true
  description?: true
  category?: true
  date?: true
  createdAt?: true
  updatedAt?: true
  tripId?: true
  budgetId?: true
}

export type ExpenseCountAggregateInputType = {
  id?: true
  amount?: true
  description?: true
  category?: true
  date?: true
  createdAt?: true
  updatedAt?: true
  tripId?: true
  budgetId?: true
  _all?: true
}

export type ExpenseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Expense to aggregate.
   */
  where?: Prisma.ExpenseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Expenses to fetch.
   */
  orderBy?: Prisma.ExpenseOrderByWithRelationInput | Prisma.ExpenseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExpenseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Expenses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Expenses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Expenses
  **/
  _count?: true | ExpenseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExpenseAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExpenseSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExpenseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExpenseMaxAggregateInputType
}

export type GetExpenseAggregateType<T extends ExpenseAggregateArgs> = {
      [P in keyof T & keyof AggregateExpense]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExpense[P]>
    : Prisma.GetScalarType<T[P], AggregateExpense[P]>
}




export type ExpenseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExpenseWhereInput
  orderBy?: Prisma.ExpenseOrderByWithAggregationInput | Prisma.ExpenseOrderByWithAggregationInput[]
  by: Prisma.ExpenseScalarFieldEnum[] | Prisma.ExpenseScalarFieldEnum
  having?: Prisma.ExpenseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExpenseCountAggregateInputType | true
  _avg?: ExpenseAvgAggregateInputType
  _sum?: ExpenseSumAggregateInputType
  _min?: ExpenseMinAggregateInputType
  _max?: ExpenseMaxAggregateInputType
}

export type ExpenseGroupByOutputType = {
  id: number
  amount: runtime.Decimal
  description: string
  category: $Enums.ExpenseCategory
  date: Date
  createdAt: Date
  updatedAt: Date
  tripId: number | null
  budgetId: number | null
  _count: ExpenseCountAggregateOutputType | null
  _avg: ExpenseAvgAggregateOutputType | null
  _sum: ExpenseSumAggregateOutputType | null
  _min: ExpenseMinAggregateOutputType | null
  _max: ExpenseMaxAggregateOutputType | null
}

type GetExpenseGroupByPayload<T extends ExpenseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExpenseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExpenseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExpenseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExpenseGroupByOutputType[P]>
      }
    >
  >



export type ExpenseWhereInput = {
  AND?: Prisma.ExpenseWhereInput | Prisma.ExpenseWhereInput[]
  OR?: Prisma.ExpenseWhereInput[]
  NOT?: Prisma.ExpenseWhereInput | Prisma.ExpenseWhereInput[]
  id?: Prisma.IntFilter<"Expense"> | number
  amount?: Prisma.DecimalFilter<"Expense"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFilter<"Expense"> | string
  category?: Prisma.EnumExpenseCategoryFilter<"Expense"> | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFilter<"Expense"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Expense"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Expense"> | Date | string
  tripId?: Prisma.IntNullableFilter<"Expense"> | number | null
  budgetId?: Prisma.IntNullableFilter<"Expense"> | number | null
  trip?: Prisma.XOR<Prisma.TripNullableScalarRelationFilter, Prisma.TripWhereInput> | null
  budget?: Prisma.XOR<Prisma.BudgetNullableScalarRelationFilter, Prisma.BudgetWhereInput> | null
}

export type ExpenseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  category?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrderInput | Prisma.SortOrder
  budgetId?: Prisma.SortOrderInput | Prisma.SortOrder
  trip?: Prisma.TripOrderByWithRelationInput
  budget?: Prisma.BudgetOrderByWithRelationInput
}

export type ExpenseWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ExpenseWhereInput | Prisma.ExpenseWhereInput[]
  OR?: Prisma.ExpenseWhereInput[]
  NOT?: Prisma.ExpenseWhereInput | Prisma.ExpenseWhereInput[]
  amount?: Prisma.DecimalFilter<"Expense"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFilter<"Expense"> | string
  category?: Prisma.EnumExpenseCategoryFilter<"Expense"> | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFilter<"Expense"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Expense"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Expense"> | Date | string
  tripId?: Prisma.IntNullableFilter<"Expense"> | number | null
  budgetId?: Prisma.IntNullableFilter<"Expense"> | number | null
  trip?: Prisma.XOR<Prisma.TripNullableScalarRelationFilter, Prisma.TripWhereInput> | null
  budget?: Prisma.XOR<Prisma.BudgetNullableScalarRelationFilter, Prisma.BudgetWhereInput> | null
}, "id">

export type ExpenseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  category?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrderInput | Prisma.SortOrder
  budgetId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ExpenseCountOrderByAggregateInput
  _avg?: Prisma.ExpenseAvgOrderByAggregateInput
  _max?: Prisma.ExpenseMaxOrderByAggregateInput
  _min?: Prisma.ExpenseMinOrderByAggregateInput
  _sum?: Prisma.ExpenseSumOrderByAggregateInput
}

export type ExpenseScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExpenseScalarWhereWithAggregatesInput | Prisma.ExpenseScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExpenseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExpenseScalarWhereWithAggregatesInput | Prisma.ExpenseScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Expense"> | number
  amount?: Prisma.DecimalWithAggregatesFilter<"Expense"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringWithAggregatesFilter<"Expense"> | string
  category?: Prisma.EnumExpenseCategoryWithAggregatesFilter<"Expense"> | $Enums.ExpenseCategory
  date?: Prisma.DateTimeWithAggregatesFilter<"Expense"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Expense"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Expense"> | Date | string
  tripId?: Prisma.IntNullableWithAggregatesFilter<"Expense"> | number | null
  budgetId?: Prisma.IntNullableWithAggregatesFilter<"Expense"> | number | null
}

export type ExpenseCreateInput = {
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  trip?: Prisma.TripCreateNestedOneWithoutExpensesInput
  budget?: Prisma.BudgetCreateNestedOneWithoutExpensesInput
}

export type ExpenseUncheckedCreateInput = {
  id?: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  tripId?: number | null
  budgetId?: number | null
}

export type ExpenseUpdateInput = {
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  trip?: Prisma.TripUpdateOneWithoutExpensesNestedInput
  budget?: Prisma.BudgetUpdateOneWithoutExpensesNestedInput
}

export type ExpenseUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tripId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  budgetId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ExpenseCreateManyInput = {
  id?: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  tripId?: number | null
  budgetId?: number | null
}

export type ExpenseUpdateManyMutationInput = {
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExpenseUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tripId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  budgetId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ExpenseListRelationFilter = {
  every?: Prisma.ExpenseWhereInput
  some?: Prisma.ExpenseWhereInput
  none?: Prisma.ExpenseWhereInput
}

export type ExpenseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExpenseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  category?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
}

export type ExpenseAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
}

export type ExpenseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  category?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
}

export type ExpenseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  category?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
}

export type ExpenseSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
}

export type ExpenseCreateNestedManyWithoutTripInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutTripInput, Prisma.ExpenseUncheckedCreateWithoutTripInput> | Prisma.ExpenseCreateWithoutTripInput[] | Prisma.ExpenseUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutTripInput | Prisma.ExpenseCreateOrConnectWithoutTripInput[]
  createMany?: Prisma.ExpenseCreateManyTripInputEnvelope
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
}

export type ExpenseUncheckedCreateNestedManyWithoutTripInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutTripInput, Prisma.ExpenseUncheckedCreateWithoutTripInput> | Prisma.ExpenseCreateWithoutTripInput[] | Prisma.ExpenseUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutTripInput | Prisma.ExpenseCreateOrConnectWithoutTripInput[]
  createMany?: Prisma.ExpenseCreateManyTripInputEnvelope
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
}

export type ExpenseUpdateManyWithoutTripNestedInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutTripInput, Prisma.ExpenseUncheckedCreateWithoutTripInput> | Prisma.ExpenseCreateWithoutTripInput[] | Prisma.ExpenseUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutTripInput | Prisma.ExpenseCreateOrConnectWithoutTripInput[]
  upsert?: Prisma.ExpenseUpsertWithWhereUniqueWithoutTripInput | Prisma.ExpenseUpsertWithWhereUniqueWithoutTripInput[]
  createMany?: Prisma.ExpenseCreateManyTripInputEnvelope
  set?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  disconnect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  delete?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  update?: Prisma.ExpenseUpdateWithWhereUniqueWithoutTripInput | Prisma.ExpenseUpdateWithWhereUniqueWithoutTripInput[]
  updateMany?: Prisma.ExpenseUpdateManyWithWhereWithoutTripInput | Prisma.ExpenseUpdateManyWithWhereWithoutTripInput[]
  deleteMany?: Prisma.ExpenseScalarWhereInput | Prisma.ExpenseScalarWhereInput[]
}

export type ExpenseUncheckedUpdateManyWithoutTripNestedInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutTripInput, Prisma.ExpenseUncheckedCreateWithoutTripInput> | Prisma.ExpenseCreateWithoutTripInput[] | Prisma.ExpenseUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutTripInput | Prisma.ExpenseCreateOrConnectWithoutTripInput[]
  upsert?: Prisma.ExpenseUpsertWithWhereUniqueWithoutTripInput | Prisma.ExpenseUpsertWithWhereUniqueWithoutTripInput[]
  createMany?: Prisma.ExpenseCreateManyTripInputEnvelope
  set?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  disconnect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  delete?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  update?: Prisma.ExpenseUpdateWithWhereUniqueWithoutTripInput | Prisma.ExpenseUpdateWithWhereUniqueWithoutTripInput[]
  updateMany?: Prisma.ExpenseUpdateManyWithWhereWithoutTripInput | Prisma.ExpenseUpdateManyWithWhereWithoutTripInput[]
  deleteMany?: Prisma.ExpenseScalarWhereInput | Prisma.ExpenseScalarWhereInput[]
}

export type ExpenseCreateNestedManyWithoutBudgetInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutBudgetInput, Prisma.ExpenseUncheckedCreateWithoutBudgetInput> | Prisma.ExpenseCreateWithoutBudgetInput[] | Prisma.ExpenseUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutBudgetInput | Prisma.ExpenseCreateOrConnectWithoutBudgetInput[]
  createMany?: Prisma.ExpenseCreateManyBudgetInputEnvelope
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
}

export type ExpenseUncheckedCreateNestedManyWithoutBudgetInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutBudgetInput, Prisma.ExpenseUncheckedCreateWithoutBudgetInput> | Prisma.ExpenseCreateWithoutBudgetInput[] | Prisma.ExpenseUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutBudgetInput | Prisma.ExpenseCreateOrConnectWithoutBudgetInput[]
  createMany?: Prisma.ExpenseCreateManyBudgetInputEnvelope
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
}

export type ExpenseUpdateManyWithoutBudgetNestedInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutBudgetInput, Prisma.ExpenseUncheckedCreateWithoutBudgetInput> | Prisma.ExpenseCreateWithoutBudgetInput[] | Prisma.ExpenseUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutBudgetInput | Prisma.ExpenseCreateOrConnectWithoutBudgetInput[]
  upsert?: Prisma.ExpenseUpsertWithWhereUniqueWithoutBudgetInput | Prisma.ExpenseUpsertWithWhereUniqueWithoutBudgetInput[]
  createMany?: Prisma.ExpenseCreateManyBudgetInputEnvelope
  set?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  disconnect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  delete?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  update?: Prisma.ExpenseUpdateWithWhereUniqueWithoutBudgetInput | Prisma.ExpenseUpdateWithWhereUniqueWithoutBudgetInput[]
  updateMany?: Prisma.ExpenseUpdateManyWithWhereWithoutBudgetInput | Prisma.ExpenseUpdateManyWithWhereWithoutBudgetInput[]
  deleteMany?: Prisma.ExpenseScalarWhereInput | Prisma.ExpenseScalarWhereInput[]
}

export type ExpenseUncheckedUpdateManyWithoutBudgetNestedInput = {
  create?: Prisma.XOR<Prisma.ExpenseCreateWithoutBudgetInput, Prisma.ExpenseUncheckedCreateWithoutBudgetInput> | Prisma.ExpenseCreateWithoutBudgetInput[] | Prisma.ExpenseUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.ExpenseCreateOrConnectWithoutBudgetInput | Prisma.ExpenseCreateOrConnectWithoutBudgetInput[]
  upsert?: Prisma.ExpenseUpsertWithWhereUniqueWithoutBudgetInput | Prisma.ExpenseUpsertWithWhereUniqueWithoutBudgetInput[]
  createMany?: Prisma.ExpenseCreateManyBudgetInputEnvelope
  set?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  disconnect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  delete?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  connect?: Prisma.ExpenseWhereUniqueInput | Prisma.ExpenseWhereUniqueInput[]
  update?: Prisma.ExpenseUpdateWithWhereUniqueWithoutBudgetInput | Prisma.ExpenseUpdateWithWhereUniqueWithoutBudgetInput[]
  updateMany?: Prisma.ExpenseUpdateManyWithWhereWithoutBudgetInput | Prisma.ExpenseUpdateManyWithWhereWithoutBudgetInput[]
  deleteMany?: Prisma.ExpenseScalarWhereInput | Prisma.ExpenseScalarWhereInput[]
}

export type EnumExpenseCategoryFieldUpdateOperationsInput = {
  set?: $Enums.ExpenseCategory
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ExpenseCreateWithoutTripInput = {
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  budget?: Prisma.BudgetCreateNestedOneWithoutExpensesInput
}

export type ExpenseUncheckedCreateWithoutTripInput = {
  id?: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  budgetId?: number | null
}

export type ExpenseCreateOrConnectWithoutTripInput = {
  where: Prisma.ExpenseWhereUniqueInput
  create: Prisma.XOR<Prisma.ExpenseCreateWithoutTripInput, Prisma.ExpenseUncheckedCreateWithoutTripInput>
}

export type ExpenseCreateManyTripInputEnvelope = {
  data: Prisma.ExpenseCreateManyTripInput | Prisma.ExpenseCreateManyTripInput[]
  skipDuplicates?: boolean
}

export type ExpenseUpsertWithWhereUniqueWithoutTripInput = {
  where: Prisma.ExpenseWhereUniqueInput
  update: Prisma.XOR<Prisma.ExpenseUpdateWithoutTripInput, Prisma.ExpenseUncheckedUpdateWithoutTripInput>
  create: Prisma.XOR<Prisma.ExpenseCreateWithoutTripInput, Prisma.ExpenseUncheckedCreateWithoutTripInput>
}

export type ExpenseUpdateWithWhereUniqueWithoutTripInput = {
  where: Prisma.ExpenseWhereUniqueInput
  data: Prisma.XOR<Prisma.ExpenseUpdateWithoutTripInput, Prisma.ExpenseUncheckedUpdateWithoutTripInput>
}

export type ExpenseUpdateManyWithWhereWithoutTripInput = {
  where: Prisma.ExpenseScalarWhereInput
  data: Prisma.XOR<Prisma.ExpenseUpdateManyMutationInput, Prisma.ExpenseUncheckedUpdateManyWithoutTripInput>
}

export type ExpenseScalarWhereInput = {
  AND?: Prisma.ExpenseScalarWhereInput | Prisma.ExpenseScalarWhereInput[]
  OR?: Prisma.ExpenseScalarWhereInput[]
  NOT?: Prisma.ExpenseScalarWhereInput | Prisma.ExpenseScalarWhereInput[]
  id?: Prisma.IntFilter<"Expense"> | number
  amount?: Prisma.DecimalFilter<"Expense"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFilter<"Expense"> | string
  category?: Prisma.EnumExpenseCategoryFilter<"Expense"> | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFilter<"Expense"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Expense"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Expense"> | Date | string
  tripId?: Prisma.IntNullableFilter<"Expense"> | number | null
  budgetId?: Prisma.IntNullableFilter<"Expense"> | number | null
}

export type ExpenseCreateWithoutBudgetInput = {
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  trip?: Prisma.TripCreateNestedOneWithoutExpensesInput
}

export type ExpenseUncheckedCreateWithoutBudgetInput = {
  id?: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  tripId?: number | null
}

export type ExpenseCreateOrConnectWithoutBudgetInput = {
  where: Prisma.ExpenseWhereUniqueInput
  create: Prisma.XOR<Prisma.ExpenseCreateWithoutBudgetInput, Prisma.ExpenseUncheckedCreateWithoutBudgetInput>
}

export type ExpenseCreateManyBudgetInputEnvelope = {
  data: Prisma.ExpenseCreateManyBudgetInput | Prisma.ExpenseCreateManyBudgetInput[]
  skipDuplicates?: boolean
}

export type ExpenseUpsertWithWhereUniqueWithoutBudgetInput = {
  where: Prisma.ExpenseWhereUniqueInput
  update: Prisma.XOR<Prisma.ExpenseUpdateWithoutBudgetInput, Prisma.ExpenseUncheckedUpdateWithoutBudgetInput>
  create: Prisma.XOR<Prisma.ExpenseCreateWithoutBudgetInput, Prisma.ExpenseUncheckedCreateWithoutBudgetInput>
}

export type ExpenseUpdateWithWhereUniqueWithoutBudgetInput = {
  where: Prisma.ExpenseWhereUniqueInput
  data: Prisma.XOR<Prisma.ExpenseUpdateWithoutBudgetInput, Prisma.ExpenseUncheckedUpdateWithoutBudgetInput>
}

export type ExpenseUpdateManyWithWhereWithoutBudgetInput = {
  where: Prisma.ExpenseScalarWhereInput
  data: Prisma.XOR<Prisma.ExpenseUpdateManyMutationInput, Prisma.ExpenseUncheckedUpdateManyWithoutBudgetInput>
}

export type ExpenseCreateManyTripInput = {
  id?: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  budgetId?: number | null
}

export type ExpenseUpdateWithoutTripInput = {
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  budget?: Prisma.BudgetUpdateOneWithoutExpensesNestedInput
}

export type ExpenseUncheckedUpdateWithoutTripInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  budgetId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ExpenseUncheckedUpdateManyWithoutTripInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  budgetId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ExpenseCreateManyBudgetInput = {
  id?: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  description: string
  category: $Enums.ExpenseCategory
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  tripId?: number | null
}

export type ExpenseUpdateWithoutBudgetInput = {
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  trip?: Prisma.TripUpdateOneWithoutExpensesNestedInput
}

export type ExpenseUncheckedUpdateWithoutBudgetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tripId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ExpenseUncheckedUpdateManyWithoutBudgetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumExpenseCategoryFieldUpdateOperationsInput | $Enums.ExpenseCategory
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tripId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type ExpenseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  description?: boolean
  category?: boolean
  date?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
  budgetId?: boolean
  trip?: boolean | Prisma.Expense$tripArgs<ExtArgs>
  budget?: boolean | Prisma.Expense$budgetArgs<ExtArgs>
}, ExtArgs["result"]["expense"]>

export type ExpenseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  description?: boolean
  category?: boolean
  date?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
  budgetId?: boolean
  trip?: boolean | Prisma.Expense$tripArgs<ExtArgs>
  budget?: boolean | Prisma.Expense$budgetArgs<ExtArgs>
}, ExtArgs["result"]["expense"]>

export type ExpenseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  description?: boolean
  category?: boolean
  date?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
  budgetId?: boolean
  trip?: boolean | Prisma.Expense$tripArgs<ExtArgs>
  budget?: boolean | Prisma.Expense$budgetArgs<ExtArgs>
}, ExtArgs["result"]["expense"]>

export type ExpenseSelectScalar = {
  id?: boolean
  amount?: boolean
  description?: boolean
  category?: boolean
  date?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
  budgetId?: boolean
}

export type ExpenseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "amount" | "description" | "category" | "date" | "createdAt" | "updatedAt" | "tripId" | "budgetId", ExtArgs["result"]["expense"]>
export type ExpenseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trip?: boolean | Prisma.Expense$tripArgs<ExtArgs>
  budget?: boolean | Prisma.Expense$budgetArgs<ExtArgs>
}
export type ExpenseIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trip?: boolean | Prisma.Expense$tripArgs<ExtArgs>
  budget?: boolean | Prisma.Expense$budgetArgs<ExtArgs>
}
export type ExpenseIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trip?: boolean | Prisma.Expense$tripArgs<ExtArgs>
  budget?: boolean | Prisma.Expense$budgetArgs<ExtArgs>
}

export type $ExpensePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Expense"
  objects: {
    trip: Prisma.$TripPayload<ExtArgs> | null
    budget: Prisma.$BudgetPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    amount: runtime.Decimal
    description: string
    category: $Enums.ExpenseCategory
    date: Date
    createdAt: Date
    updatedAt: Date
    tripId: number | null
    budgetId: number | null
  }, ExtArgs["result"]["expense"]>
  composites: {}
}

export type ExpenseGetPayload<S extends boolean | null | undefined | ExpenseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExpensePayload, S>

export type ExpenseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExpenseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExpenseCountAggregateInputType | true
  }

export interface ExpenseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Expense'], meta: { name: 'Expense' } }
  /**
   * Find zero or one Expense that matches the filter.
   * @param {ExpenseFindUniqueArgs} args - Arguments to find a Expense
   * @example
   * // Get one Expense
   * const expense = await prisma.expense.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExpenseFindUniqueArgs>(args: Prisma.SelectSubset<T, ExpenseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Expense that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExpenseFindUniqueOrThrowArgs} args - Arguments to find a Expense
   * @example
   * // Get one Expense
   * const expense = await prisma.expense.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExpenseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExpenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Expense that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseFindFirstArgs} args - Arguments to find a Expense
   * @example
   * // Get one Expense
   * const expense = await prisma.expense.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExpenseFindFirstArgs>(args?: Prisma.SelectSubset<T, ExpenseFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Expense that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseFindFirstOrThrowArgs} args - Arguments to find a Expense
   * @example
   * // Get one Expense
   * const expense = await prisma.expense.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExpenseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExpenseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Expenses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Expenses
   * const expenses = await prisma.expense.findMany()
   * 
   * // Get first 10 Expenses
   * const expenses = await prisma.expense.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const expenseWithIdOnly = await prisma.expense.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExpenseFindManyArgs>(args?: Prisma.SelectSubset<T, ExpenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Expense.
   * @param {ExpenseCreateArgs} args - Arguments to create a Expense.
   * @example
   * // Create one Expense
   * const Expense = await prisma.expense.create({
   *   data: {
   *     // ... data to create a Expense
   *   }
   * })
   * 
   */
  create<T extends ExpenseCreateArgs>(args: Prisma.SelectSubset<T, ExpenseCreateArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Expenses.
   * @param {ExpenseCreateManyArgs} args - Arguments to create many Expenses.
   * @example
   * // Create many Expenses
   * const expense = await prisma.expense.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExpenseCreateManyArgs>(args?: Prisma.SelectSubset<T, ExpenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Expenses and returns the data saved in the database.
   * @param {ExpenseCreateManyAndReturnArgs} args - Arguments to create many Expenses.
   * @example
   * // Create many Expenses
   * const expense = await prisma.expense.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Expenses and only return the `id`
   * const expenseWithIdOnly = await prisma.expense.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExpenseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExpenseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Expense.
   * @param {ExpenseDeleteArgs} args - Arguments to delete one Expense.
   * @example
   * // Delete one Expense
   * const Expense = await prisma.expense.delete({
   *   where: {
   *     // ... filter to delete one Expense
   *   }
   * })
   * 
   */
  delete<T extends ExpenseDeleteArgs>(args: Prisma.SelectSubset<T, ExpenseDeleteArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Expense.
   * @param {ExpenseUpdateArgs} args - Arguments to update one Expense.
   * @example
   * // Update one Expense
   * const expense = await prisma.expense.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExpenseUpdateArgs>(args: Prisma.SelectSubset<T, ExpenseUpdateArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Expenses.
   * @param {ExpenseDeleteManyArgs} args - Arguments to filter Expenses to delete.
   * @example
   * // Delete a few Expenses
   * const { count } = await prisma.expense.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExpenseDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExpenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Expenses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Expenses
   * const expense = await prisma.expense.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExpenseUpdateManyArgs>(args: Prisma.SelectSubset<T, ExpenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Expenses and returns the data updated in the database.
   * @param {ExpenseUpdateManyAndReturnArgs} args - Arguments to update many Expenses.
   * @example
   * // Update many Expenses
   * const expense = await prisma.expense.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Expenses and only return the `id`
   * const expenseWithIdOnly = await prisma.expense.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExpenseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExpenseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Expense.
   * @param {ExpenseUpsertArgs} args - Arguments to update or create a Expense.
   * @example
   * // Update or create a Expense
   * const expense = await prisma.expense.upsert({
   *   create: {
   *     // ... data to create a Expense
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Expense we want to update
   *   }
   * })
   */
  upsert<T extends ExpenseUpsertArgs>(args: Prisma.SelectSubset<T, ExpenseUpsertArgs<ExtArgs>>): Prisma.Prisma__ExpenseClient<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Expenses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseCountArgs} args - Arguments to filter Expenses to count.
   * @example
   * // Count the number of Expenses
   * const count = await prisma.expense.count({
   *   where: {
   *     // ... the filter for the Expenses we want to count
   *   }
   * })
  **/
  count<T extends ExpenseCountArgs>(
    args?: Prisma.Subset<T, ExpenseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExpenseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Expense.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExpenseAggregateArgs>(args: Prisma.Subset<T, ExpenseAggregateArgs>): Prisma.PrismaPromise<GetExpenseAggregateType<T>>

  /**
   * Group by Expense.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExpenseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExpenseGroupByArgs['orderBy'] }
      : { orderBy?: ExpenseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExpenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Expense model
 */
readonly fields: ExpenseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Expense.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExpenseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  trip<T extends Prisma.Expense$tripArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Expense$tripArgs<ExtArgs>>): Prisma.Prisma__TripClient<runtime.Types.Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  budget<T extends Prisma.Expense$budgetArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Expense$budgetArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Expense model
 */
export interface ExpenseFieldRefs {
  readonly id: Prisma.FieldRef<"Expense", 'Int'>
  readonly amount: Prisma.FieldRef<"Expense", 'Decimal'>
  readonly description: Prisma.FieldRef<"Expense", 'String'>
  readonly category: Prisma.FieldRef<"Expense", 'ExpenseCategory'>
  readonly date: Prisma.FieldRef<"Expense", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Expense", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Expense", 'DateTime'>
  readonly tripId: Prisma.FieldRef<"Expense", 'Int'>
  readonly budgetId: Prisma.FieldRef<"Expense", 'Int'>
}
    

// Custom InputTypes
/**
 * Expense findUnique
 */
export type ExpenseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * Filter, which Expense to fetch.
   */
  where: Prisma.ExpenseWhereUniqueInput
}

/**
 * Expense findUniqueOrThrow
 */
export type ExpenseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * Filter, which Expense to fetch.
   */
  where: Prisma.ExpenseWhereUniqueInput
}

/**
 * Expense findFirst
 */
export type ExpenseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * Filter, which Expense to fetch.
   */
  where?: Prisma.ExpenseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Expenses to fetch.
   */
  orderBy?: Prisma.ExpenseOrderByWithRelationInput | Prisma.ExpenseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Expenses.
   */
  cursor?: Prisma.ExpenseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Expenses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Expenses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Expenses.
   */
  distinct?: Prisma.ExpenseScalarFieldEnum | Prisma.ExpenseScalarFieldEnum[]
}

/**
 * Expense findFirstOrThrow
 */
export type ExpenseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * Filter, which Expense to fetch.
   */
  where?: Prisma.ExpenseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Expenses to fetch.
   */
  orderBy?: Prisma.ExpenseOrderByWithRelationInput | Prisma.ExpenseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Expenses.
   */
  cursor?: Prisma.ExpenseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Expenses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Expenses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Expenses.
   */
  distinct?: Prisma.ExpenseScalarFieldEnum | Prisma.ExpenseScalarFieldEnum[]
}

/**
 * Expense findMany
 */
export type ExpenseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * Filter, which Expenses to fetch.
   */
  where?: Prisma.ExpenseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Expenses to fetch.
   */
  orderBy?: Prisma.ExpenseOrderByWithRelationInput | Prisma.ExpenseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Expenses.
   */
  cursor?: Prisma.ExpenseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Expenses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Expenses.
   */
  skip?: number
  distinct?: Prisma.ExpenseScalarFieldEnum | Prisma.ExpenseScalarFieldEnum[]
}

/**
 * Expense create
 */
export type ExpenseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * The data needed to create a Expense.
   */
  data: Prisma.XOR<Prisma.ExpenseCreateInput, Prisma.ExpenseUncheckedCreateInput>
}

/**
 * Expense createMany
 */
export type ExpenseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Expenses.
   */
  data: Prisma.ExpenseCreateManyInput | Prisma.ExpenseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Expense createManyAndReturn
 */
export type ExpenseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * The data used to create many Expenses.
   */
  data: Prisma.ExpenseCreateManyInput | Prisma.ExpenseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Expense update
 */
export type ExpenseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * The data needed to update a Expense.
   */
  data: Prisma.XOR<Prisma.ExpenseUpdateInput, Prisma.ExpenseUncheckedUpdateInput>
  /**
   * Choose, which Expense to update.
   */
  where: Prisma.ExpenseWhereUniqueInput
}

/**
 * Expense updateMany
 */
export type ExpenseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Expenses.
   */
  data: Prisma.XOR<Prisma.ExpenseUpdateManyMutationInput, Prisma.ExpenseUncheckedUpdateManyInput>
  /**
   * Filter which Expenses to update
   */
  where?: Prisma.ExpenseWhereInput
  /**
   * Limit how many Expenses to update.
   */
  limit?: number
}

/**
 * Expense updateManyAndReturn
 */
export type ExpenseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * The data used to update Expenses.
   */
  data: Prisma.XOR<Prisma.ExpenseUpdateManyMutationInput, Prisma.ExpenseUncheckedUpdateManyInput>
  /**
   * Filter which Expenses to update
   */
  where?: Prisma.ExpenseWhereInput
  /**
   * Limit how many Expenses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Expense upsert
 */
export type ExpenseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * The filter to search for the Expense to update in case it exists.
   */
  where: Prisma.ExpenseWhereUniqueInput
  /**
   * In case the Expense found by the `where` argument doesn't exist, create a new Expense with this data.
   */
  create: Prisma.XOR<Prisma.ExpenseCreateInput, Prisma.ExpenseUncheckedCreateInput>
  /**
   * In case the Expense was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExpenseUpdateInput, Prisma.ExpenseUncheckedUpdateInput>
}

/**
 * Expense delete
 */
export type ExpenseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  /**
   * Filter which Expense to delete.
   */
  where: Prisma.ExpenseWhereUniqueInput
}

/**
 * Expense deleteMany
 */
export type ExpenseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Expenses to delete
   */
  where?: Prisma.ExpenseWhereInput
  /**
   * Limit how many Expenses to delete.
   */
  limit?: number
}

/**
 * Expense.trip
 */
export type Expense$tripArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Trip
   */
  select?: Prisma.TripSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Trip
   */
  omit?: Prisma.TripOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripInclude<ExtArgs> | null
  where?: Prisma.TripWhereInput
}

/**
 * Expense.budget
 */
export type Expense$budgetArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  where?: Prisma.BudgetWhereInput
}

/**
 * Expense without action
 */
export type ExpenseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
}
