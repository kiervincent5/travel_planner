
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Budget` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Budget
 * 
 */
export type BudgetModel = runtime.Types.Result.DefaultSelection<Prisma.$BudgetPayload>

export type AggregateBudget = {
  _count: BudgetCountAggregateOutputType | null
  _avg: BudgetAvgAggregateOutputType | null
  _sum: BudgetSumAggregateOutputType | null
  _min: BudgetMinAggregateOutputType | null
  _max: BudgetMaxAggregateOutputType | null
}

export type BudgetAvgAggregateOutputType = {
  id: number | null
  totalBudget: runtime.Decimal | null
  spentAmount: runtime.Decimal | null
  userId: number | null
}

export type BudgetSumAggregateOutputType = {
  id: number | null
  totalBudget: runtime.Decimal | null
  spentAmount: runtime.Decimal | null
  userId: number | null
}

export type BudgetMinAggregateOutputType = {
  id: number | null
  totalBudget: runtime.Decimal | null
  spentAmount: runtime.Decimal | null
  currency: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: number | null
}

export type BudgetMaxAggregateOutputType = {
  id: number | null
  totalBudget: runtime.Decimal | null
  spentAmount: runtime.Decimal | null
  currency: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: number | null
}

export type BudgetCountAggregateOutputType = {
  id: number
  totalBudget: number
  spentAmount: number
  currency: number
  createdAt: number
  updatedAt: number
  userId: number
  _all: number
}


export type BudgetAvgAggregateInputType = {
  id?: true
  totalBudget?: true
  spentAmount?: true
  userId?: true
}

export type BudgetSumAggregateInputType = {
  id?: true
  totalBudget?: true
  spentAmount?: true
  userId?: true
}

export type BudgetMinAggregateInputType = {
  id?: true
  totalBudget?: true
  spentAmount?: true
  currency?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type BudgetMaxAggregateInputType = {
  id?: true
  totalBudget?: true
  spentAmount?: true
  currency?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type BudgetCountAggregateInputType = {
  id?: true
  totalBudget?: true
  spentAmount?: true
  currency?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  _all?: true
}

export type BudgetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Budget to aggregate.
   */
  where?: Prisma.BudgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Budgets to fetch.
   */
  orderBy?: Prisma.BudgetOrderByWithRelationInput | Prisma.BudgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BudgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Budgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Budgets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Budgets
  **/
  _count?: true | BudgetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BudgetAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BudgetSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BudgetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BudgetMaxAggregateInputType
}

export type GetBudgetAggregateType<T extends BudgetAggregateArgs> = {
      [P in keyof T & keyof AggregateBudget]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBudget[P]>
    : Prisma.GetScalarType<T[P], AggregateBudget[P]>
}




export type BudgetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BudgetWhereInput
  orderBy?: Prisma.BudgetOrderByWithAggregationInput | Prisma.BudgetOrderByWithAggregationInput[]
  by: Prisma.BudgetScalarFieldEnum[] | Prisma.BudgetScalarFieldEnum
  having?: Prisma.BudgetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BudgetCountAggregateInputType | true
  _avg?: BudgetAvgAggregateInputType
  _sum?: BudgetSumAggregateInputType
  _min?: BudgetMinAggregateInputType
  _max?: BudgetMaxAggregateInputType
}

export type BudgetGroupByOutputType = {
  id: number
  totalBudget: runtime.Decimal
  spentAmount: runtime.Decimal
  currency: string
  createdAt: Date
  updatedAt: Date
  userId: number
  _count: BudgetCountAggregateOutputType | null
  _avg: BudgetAvgAggregateOutputType | null
  _sum: BudgetSumAggregateOutputType | null
  _min: BudgetMinAggregateOutputType | null
  _max: BudgetMaxAggregateOutputType | null
}

type GetBudgetGroupByPayload<T extends BudgetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BudgetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BudgetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BudgetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BudgetGroupByOutputType[P]>
      }
    >
  >



export type BudgetWhereInput = {
  AND?: Prisma.BudgetWhereInput | Prisma.BudgetWhereInput[]
  OR?: Prisma.BudgetWhereInput[]
  NOT?: Prisma.BudgetWhereInput | Prisma.BudgetWhereInput[]
  id?: Prisma.IntFilter<"Budget"> | number
  totalBudget?: Prisma.DecimalFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Budget"> | string
  createdAt?: Prisma.DateTimeFilter<"Budget"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Budget"> | Date | string
  userId?: Prisma.IntFilter<"Budget"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  expenses?: Prisma.ExpenseListRelationFilter
}

export type BudgetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  totalBudget?: Prisma.SortOrder
  spentAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  expenses?: Prisma.ExpenseOrderByRelationAggregateInput
}

export type BudgetWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.BudgetWhereInput | Prisma.BudgetWhereInput[]
  OR?: Prisma.BudgetWhereInput[]
  NOT?: Prisma.BudgetWhereInput | Prisma.BudgetWhereInput[]
  totalBudget?: Prisma.DecimalFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Budget"> | string
  createdAt?: Prisma.DateTimeFilter<"Budget"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Budget"> | Date | string
  userId?: Prisma.IntFilter<"Budget"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  expenses?: Prisma.ExpenseListRelationFilter
}, "id">

export type BudgetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  totalBudget?: Prisma.SortOrder
  spentAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.BudgetCountOrderByAggregateInput
  _avg?: Prisma.BudgetAvgOrderByAggregateInput
  _max?: Prisma.BudgetMaxOrderByAggregateInput
  _min?: Prisma.BudgetMinOrderByAggregateInput
  _sum?: Prisma.BudgetSumOrderByAggregateInput
}

export type BudgetScalarWhereWithAggregatesInput = {
  AND?: Prisma.BudgetScalarWhereWithAggregatesInput | Prisma.BudgetScalarWhereWithAggregatesInput[]
  OR?: Prisma.BudgetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BudgetScalarWhereWithAggregatesInput | Prisma.BudgetScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Budget"> | number
  totalBudget?: Prisma.DecimalWithAggregatesFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalWithAggregatesFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringWithAggregatesFilter<"Budget"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Budget"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Budget"> | Date | string
  userId?: Prisma.IntWithAggregatesFilter<"Budget"> | number
}

export type BudgetCreateInput = {
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutBudgetsInput
  expenses?: Prisma.ExpenseCreateNestedManyWithoutBudgetInput
}

export type BudgetUncheckedCreateInput = {
  id?: number
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: number
  expenses?: Prisma.ExpenseUncheckedCreateNestedManyWithoutBudgetInput
}

export type BudgetUpdateInput = {
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutBudgetsNestedInput
  expenses?: Prisma.ExpenseUpdateManyWithoutBudgetNestedInput
}

export type BudgetUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  expenses?: Prisma.ExpenseUncheckedUpdateManyWithoutBudgetNestedInput
}

export type BudgetCreateManyInput = {
  id?: number
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: number
}

export type BudgetUpdateManyMutationInput = {
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BudgetUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BudgetListRelationFilter = {
  every?: Prisma.BudgetWhereInput
  some?: Prisma.BudgetWhereInput
  none?: Prisma.BudgetWhereInput
}

export type BudgetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BudgetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalBudget?: Prisma.SortOrder
  spentAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BudgetAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalBudget?: Prisma.SortOrder
  spentAmount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BudgetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalBudget?: Prisma.SortOrder
  spentAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BudgetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalBudget?: Prisma.SortOrder
  spentAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BudgetSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalBudget?: Prisma.SortOrder
  spentAmount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BudgetNullableScalarRelationFilter = {
  is?: Prisma.BudgetWhereInput | null
  isNot?: Prisma.BudgetWhereInput | null
}

export type BudgetCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BudgetCreateWithoutUserInput, Prisma.BudgetUncheckedCreateWithoutUserInput> | Prisma.BudgetCreateWithoutUserInput[] | Prisma.BudgetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BudgetCreateOrConnectWithoutUserInput | Prisma.BudgetCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BudgetCreateManyUserInputEnvelope
  connect?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
}

export type BudgetUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BudgetCreateWithoutUserInput, Prisma.BudgetUncheckedCreateWithoutUserInput> | Prisma.BudgetCreateWithoutUserInput[] | Prisma.BudgetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BudgetCreateOrConnectWithoutUserInput | Prisma.BudgetCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BudgetCreateManyUserInputEnvelope
  connect?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
}

export type BudgetUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BudgetCreateWithoutUserInput, Prisma.BudgetUncheckedCreateWithoutUserInput> | Prisma.BudgetCreateWithoutUserInput[] | Prisma.BudgetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BudgetCreateOrConnectWithoutUserInput | Prisma.BudgetCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BudgetUpsertWithWhereUniqueWithoutUserInput | Prisma.BudgetUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BudgetCreateManyUserInputEnvelope
  set?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  disconnect?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  delete?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  connect?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  update?: Prisma.BudgetUpdateWithWhereUniqueWithoutUserInput | Prisma.BudgetUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BudgetUpdateManyWithWhereWithoutUserInput | Prisma.BudgetUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BudgetScalarWhereInput | Prisma.BudgetScalarWhereInput[]
}

export type BudgetUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BudgetCreateWithoutUserInput, Prisma.BudgetUncheckedCreateWithoutUserInput> | Prisma.BudgetCreateWithoutUserInput[] | Prisma.BudgetUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BudgetCreateOrConnectWithoutUserInput | Prisma.BudgetCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BudgetUpsertWithWhereUniqueWithoutUserInput | Prisma.BudgetUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BudgetCreateManyUserInputEnvelope
  set?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  disconnect?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  delete?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  connect?: Prisma.BudgetWhereUniqueInput | Prisma.BudgetWhereUniqueInput[]
  update?: Prisma.BudgetUpdateWithWhereUniqueWithoutUserInput | Prisma.BudgetUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BudgetUpdateManyWithWhereWithoutUserInput | Prisma.BudgetUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BudgetScalarWhereInput | Prisma.BudgetScalarWhereInput[]
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type BudgetCreateNestedOneWithoutExpensesInput = {
  create?: Prisma.XOR<Prisma.BudgetCreateWithoutExpensesInput, Prisma.BudgetUncheckedCreateWithoutExpensesInput>
  connectOrCreate?: Prisma.BudgetCreateOrConnectWithoutExpensesInput
  connect?: Prisma.BudgetWhereUniqueInput
}

export type BudgetUpdateOneWithoutExpensesNestedInput = {
  create?: Prisma.XOR<Prisma.BudgetCreateWithoutExpensesInput, Prisma.BudgetUncheckedCreateWithoutExpensesInput>
  connectOrCreate?: Prisma.BudgetCreateOrConnectWithoutExpensesInput
  upsert?: Prisma.BudgetUpsertWithoutExpensesInput
  disconnect?: Prisma.BudgetWhereInput | boolean
  delete?: Prisma.BudgetWhereInput | boolean
  connect?: Prisma.BudgetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BudgetUpdateToOneWithWhereWithoutExpensesInput, Prisma.BudgetUpdateWithoutExpensesInput>, Prisma.BudgetUncheckedUpdateWithoutExpensesInput>
}

export type BudgetCreateWithoutUserInput = {
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expenses?: Prisma.ExpenseCreateNestedManyWithoutBudgetInput
}

export type BudgetUncheckedCreateWithoutUserInput = {
  id?: number
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  expenses?: Prisma.ExpenseUncheckedCreateNestedManyWithoutBudgetInput
}

export type BudgetCreateOrConnectWithoutUserInput = {
  where: Prisma.BudgetWhereUniqueInput
  create: Prisma.XOR<Prisma.BudgetCreateWithoutUserInput, Prisma.BudgetUncheckedCreateWithoutUserInput>
}

export type BudgetCreateManyUserInputEnvelope = {
  data: Prisma.BudgetCreateManyUserInput | Prisma.BudgetCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type BudgetUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BudgetWhereUniqueInput
  update: Prisma.XOR<Prisma.BudgetUpdateWithoutUserInput, Prisma.BudgetUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BudgetCreateWithoutUserInput, Prisma.BudgetUncheckedCreateWithoutUserInput>
}

export type BudgetUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BudgetWhereUniqueInput
  data: Prisma.XOR<Prisma.BudgetUpdateWithoutUserInput, Prisma.BudgetUncheckedUpdateWithoutUserInput>
}

export type BudgetUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BudgetScalarWhereInput
  data: Prisma.XOR<Prisma.BudgetUpdateManyMutationInput, Prisma.BudgetUncheckedUpdateManyWithoutUserInput>
}

export type BudgetScalarWhereInput = {
  AND?: Prisma.BudgetScalarWhereInput | Prisma.BudgetScalarWhereInput[]
  OR?: Prisma.BudgetScalarWhereInput[]
  NOT?: Prisma.BudgetScalarWhereInput | Prisma.BudgetScalarWhereInput[]
  id?: Prisma.IntFilter<"Budget"> | number
  totalBudget?: Prisma.DecimalFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFilter<"Budget"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Budget"> | string
  createdAt?: Prisma.DateTimeFilter<"Budget"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Budget"> | Date | string
  userId?: Prisma.IntFilter<"Budget"> | number
}

export type BudgetCreateWithoutExpensesInput = {
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutBudgetsInput
}

export type BudgetUncheckedCreateWithoutExpensesInput = {
  id?: number
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: number
}

export type BudgetCreateOrConnectWithoutExpensesInput = {
  where: Prisma.BudgetWhereUniqueInput
  create: Prisma.XOR<Prisma.BudgetCreateWithoutExpensesInput, Prisma.BudgetUncheckedCreateWithoutExpensesInput>
}

export type BudgetUpsertWithoutExpensesInput = {
  update: Prisma.XOR<Prisma.BudgetUpdateWithoutExpensesInput, Prisma.BudgetUncheckedUpdateWithoutExpensesInput>
  create: Prisma.XOR<Prisma.BudgetCreateWithoutExpensesInput, Prisma.BudgetUncheckedCreateWithoutExpensesInput>
  where?: Prisma.BudgetWhereInput
}

export type BudgetUpdateToOneWithWhereWithoutExpensesInput = {
  where?: Prisma.BudgetWhereInput
  data: Prisma.XOR<Prisma.BudgetUpdateWithoutExpensesInput, Prisma.BudgetUncheckedUpdateWithoutExpensesInput>
}

export type BudgetUpdateWithoutExpensesInput = {
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutBudgetsNestedInput
}

export type BudgetUncheckedUpdateWithoutExpensesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BudgetCreateManyUserInput = {
  id?: number
  totalBudget: runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BudgetUpdateWithoutUserInput = {
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expenses?: Prisma.ExpenseUpdateManyWithoutBudgetNestedInput
}

export type BudgetUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expenses?: Prisma.ExpenseUncheckedUpdateManyWithoutBudgetNestedInput
}

export type BudgetUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  totalBudget?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  spentAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type BudgetCountOutputType
 */

export type BudgetCountOutputType = {
  expenses: number
}

export type BudgetCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  expenses?: boolean | BudgetCountOutputTypeCountExpensesArgs
}

/**
 * BudgetCountOutputType without action
 */
export type BudgetCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BudgetCountOutputType
   */
  select?: Prisma.BudgetCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BudgetCountOutputType without action
 */
export type BudgetCountOutputTypeCountExpensesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExpenseWhereInput
}


export type BudgetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalBudget?: boolean
  spentAmount?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  expenses?: boolean | Prisma.Budget$expensesArgs<ExtArgs>
  _count?: boolean | Prisma.BudgetCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["budget"]>

export type BudgetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalBudget?: boolean
  spentAmount?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["budget"]>

export type BudgetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalBudget?: boolean
  spentAmount?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["budget"]>

export type BudgetSelectScalar = {
  id?: boolean
  totalBudget?: boolean
  spentAmount?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
}

export type BudgetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "totalBudget" | "spentAmount" | "currency" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["budget"]>
export type BudgetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  expenses?: boolean | Prisma.Budget$expensesArgs<ExtArgs>
  _count?: boolean | Prisma.BudgetCountOutputTypeDefaultArgs<ExtArgs>
}
export type BudgetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type BudgetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $BudgetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Budget"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    expenses: Prisma.$ExpensePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    totalBudget: runtime.Decimal
    spentAmount: runtime.Decimal
    currency: string
    createdAt: Date
    updatedAt: Date
    userId: number
  }, ExtArgs["result"]["budget"]>
  composites: {}
}

export type BudgetGetPayload<S extends boolean | null | undefined | BudgetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BudgetPayload, S>

export type BudgetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BudgetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BudgetCountAggregateInputType | true
  }

export interface BudgetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Budget'], meta: { name: 'Budget' } }
  /**
   * Find zero or one Budget that matches the filter.
   * @param {BudgetFindUniqueArgs} args - Arguments to find a Budget
   * @example
   * // Get one Budget
   * const budget = await prisma.budget.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BudgetFindUniqueArgs>(args: Prisma.SelectSubset<T, BudgetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Budget that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BudgetFindUniqueOrThrowArgs} args - Arguments to find a Budget
   * @example
   * // Get one Budget
   * const budget = await prisma.budget.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BudgetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BudgetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Budget that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BudgetFindFirstArgs} args - Arguments to find a Budget
   * @example
   * // Get one Budget
   * const budget = await prisma.budget.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BudgetFindFirstArgs>(args?: Prisma.SelectSubset<T, BudgetFindFirstArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Budget that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BudgetFindFirstOrThrowArgs} args - Arguments to find a Budget
   * @example
   * // Get one Budget
   * const budget = await prisma.budget.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BudgetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BudgetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Budgets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BudgetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Budgets
   * const budgets = await prisma.budget.findMany()
   * 
   * // Get first 10 Budgets
   * const budgets = await prisma.budget.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const budgetWithIdOnly = await prisma.budget.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BudgetFindManyArgs>(args?: Prisma.SelectSubset<T, BudgetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Budget.
   * @param {BudgetCreateArgs} args - Arguments to create a Budget.
   * @example
   * // Create one Budget
   * const Budget = await prisma.budget.create({
   *   data: {
   *     // ... data to create a Budget
   *   }
   * })
   * 
   */
  create<T extends BudgetCreateArgs>(args: Prisma.SelectSubset<T, BudgetCreateArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Budgets.
   * @param {BudgetCreateManyArgs} args - Arguments to create many Budgets.
   * @example
   * // Create many Budgets
   * const budget = await prisma.budget.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BudgetCreateManyArgs>(args?: Prisma.SelectSubset<T, BudgetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Budgets and returns the data saved in the database.
   * @param {BudgetCreateManyAndReturnArgs} args - Arguments to create many Budgets.
   * @example
   * // Create many Budgets
   * const budget = await prisma.budget.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Budgets and only return the `id`
   * const budgetWithIdOnly = await prisma.budget.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BudgetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BudgetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Budget.
   * @param {BudgetDeleteArgs} args - Arguments to delete one Budget.
   * @example
   * // Delete one Budget
   * const Budget = await prisma.budget.delete({
   *   where: {
   *     // ... filter to delete one Budget
   *   }
   * })
   * 
   */
  delete<T extends BudgetDeleteArgs>(args: Prisma.SelectSubset<T, BudgetDeleteArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Budget.
   * @param {BudgetUpdateArgs} args - Arguments to update one Budget.
   * @example
   * // Update one Budget
   * const budget = await prisma.budget.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BudgetUpdateArgs>(args: Prisma.SelectSubset<T, BudgetUpdateArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Budgets.
   * @param {BudgetDeleteManyArgs} args - Arguments to filter Budgets to delete.
   * @example
   * // Delete a few Budgets
   * const { count } = await prisma.budget.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BudgetDeleteManyArgs>(args?: Prisma.SelectSubset<T, BudgetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Budgets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BudgetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Budgets
   * const budget = await prisma.budget.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BudgetUpdateManyArgs>(args: Prisma.SelectSubset<T, BudgetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Budgets and returns the data updated in the database.
   * @param {BudgetUpdateManyAndReturnArgs} args - Arguments to update many Budgets.
   * @example
   * // Update many Budgets
   * const budget = await prisma.budget.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Budgets and only return the `id`
   * const budgetWithIdOnly = await prisma.budget.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BudgetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BudgetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Budget.
   * @param {BudgetUpsertArgs} args - Arguments to update or create a Budget.
   * @example
   * // Update or create a Budget
   * const budget = await prisma.budget.upsert({
   *   create: {
   *     // ... data to create a Budget
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Budget we want to update
   *   }
   * })
   */
  upsert<T extends BudgetUpsertArgs>(args: Prisma.SelectSubset<T, BudgetUpsertArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Budgets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BudgetCountArgs} args - Arguments to filter Budgets to count.
   * @example
   * // Count the number of Budgets
   * const count = await prisma.budget.count({
   *   where: {
   *     // ... the filter for the Budgets we want to count
   *   }
   * })
  **/
  count<T extends BudgetCountArgs>(
    args?: Prisma.Subset<T, BudgetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BudgetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Budget.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BudgetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BudgetAggregateArgs>(args: Prisma.Subset<T, BudgetAggregateArgs>): Prisma.PrismaPromise<GetBudgetAggregateType<T>>

  /**
   * Group by Budget.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BudgetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BudgetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BudgetGroupByArgs['orderBy'] }
      : { orderBy?: BudgetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BudgetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Budget model
 */
readonly fields: BudgetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Budget.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BudgetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  expenses<T extends Prisma.Budget$expensesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Budget$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Budget model
 */
export interface BudgetFieldRefs {
  readonly id: Prisma.FieldRef<"Budget", 'Int'>
  readonly totalBudget: Prisma.FieldRef<"Budget", 'Decimal'>
  readonly spentAmount: Prisma.FieldRef<"Budget", 'Decimal'>
  readonly currency: Prisma.FieldRef<"Budget", 'String'>
  readonly createdAt: Prisma.FieldRef<"Budget", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Budget", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Budget", 'Int'>
}
    

// Custom InputTypes
/**
 * Budget findUnique
 */
export type BudgetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * Filter, which Budget to fetch.
   */
  where: Prisma.BudgetWhereUniqueInput
}

/**
 * Budget findUniqueOrThrow
 */
export type BudgetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * Filter, which Budget to fetch.
   */
  where: Prisma.BudgetWhereUniqueInput
}

/**
 * Budget findFirst
 */
export type BudgetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * Filter, which Budget to fetch.
   */
  where?: Prisma.BudgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Budgets to fetch.
   */
  orderBy?: Prisma.BudgetOrderByWithRelationInput | Prisma.BudgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Budgets.
   */
  cursor?: Prisma.BudgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Budgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Budgets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Budgets.
   */
  distinct?: Prisma.BudgetScalarFieldEnum | Prisma.BudgetScalarFieldEnum[]
}

/**
 * Budget findFirstOrThrow
 */
export type BudgetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * Filter, which Budget to fetch.
   */
  where?: Prisma.BudgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Budgets to fetch.
   */
  orderBy?: Prisma.BudgetOrderByWithRelationInput | Prisma.BudgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Budgets.
   */
  cursor?: Prisma.BudgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Budgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Budgets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Budgets.
   */
  distinct?: Prisma.BudgetScalarFieldEnum | Prisma.BudgetScalarFieldEnum[]
}

/**
 * Budget findMany
 */
export type BudgetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * Filter, which Budgets to fetch.
   */
  where?: Prisma.BudgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Budgets to fetch.
   */
  orderBy?: Prisma.BudgetOrderByWithRelationInput | Prisma.BudgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Budgets.
   */
  cursor?: Prisma.BudgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Budgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Budgets.
   */
  skip?: number
  distinct?: Prisma.BudgetScalarFieldEnum | Prisma.BudgetScalarFieldEnum[]
}

/**
 * Budget create
 */
export type BudgetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * The data needed to create a Budget.
   */
  data: Prisma.XOR<Prisma.BudgetCreateInput, Prisma.BudgetUncheckedCreateInput>
}

/**
 * Budget createMany
 */
export type BudgetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Budgets.
   */
  data: Prisma.BudgetCreateManyInput | Prisma.BudgetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Budget createManyAndReturn
 */
export type BudgetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * The data used to create many Budgets.
   */
  data: Prisma.BudgetCreateManyInput | Prisma.BudgetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Budget update
 */
export type BudgetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * The data needed to update a Budget.
   */
  data: Prisma.XOR<Prisma.BudgetUpdateInput, Prisma.BudgetUncheckedUpdateInput>
  /**
   * Choose, which Budget to update.
   */
  where: Prisma.BudgetWhereUniqueInput
}

/**
 * Budget updateMany
 */
export type BudgetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Budgets.
   */
  data: Prisma.XOR<Prisma.BudgetUpdateManyMutationInput, Prisma.BudgetUncheckedUpdateManyInput>
  /**
   * Filter which Budgets to update
   */
  where?: Prisma.BudgetWhereInput
  /**
   * Limit how many Budgets to update.
   */
  limit?: number
}

/**
 * Budget updateManyAndReturn
 */
export type BudgetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * The data used to update Budgets.
   */
  data: Prisma.XOR<Prisma.BudgetUpdateManyMutationInput, Prisma.BudgetUncheckedUpdateManyInput>
  /**
   * Filter which Budgets to update
   */
  where?: Prisma.BudgetWhereInput
  /**
   * Limit how many Budgets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Budget upsert
 */
export type BudgetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * The filter to search for the Budget to update in case it exists.
   */
  where: Prisma.BudgetWhereUniqueInput
  /**
   * In case the Budget found by the `where` argument doesn't exist, create a new Budget with this data.
   */
  create: Prisma.XOR<Prisma.BudgetCreateInput, Prisma.BudgetUncheckedCreateInput>
  /**
   * In case the Budget was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BudgetUpdateInput, Prisma.BudgetUncheckedUpdateInput>
}

/**
 * Budget delete
 */
export type BudgetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
  /**
   * Filter which Budget to delete.
   */
  where: Prisma.BudgetWhereUniqueInput
}

/**
 * Budget deleteMany
 */
export type BudgetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Budgets to delete
   */
  where?: Prisma.BudgetWhereInput
  /**
   * Limit how many Budgets to delete.
   */
  limit?: number
}

/**
 * Budget.expenses
 */
export type Budget$expensesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Expense
   */
  select?: Prisma.ExpenseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Expense
   */
  omit?: Prisma.ExpenseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseInclude<ExtArgs> | null
  where?: Prisma.ExpenseWhereInput
  orderBy?: Prisma.ExpenseOrderByWithRelationInput | Prisma.ExpenseOrderByWithRelationInput[]
  cursor?: Prisma.ExpenseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExpenseScalarFieldEnum | Prisma.ExpenseScalarFieldEnum[]
}

/**
 * Budget without action
 */
export type BudgetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Budget
   */
  select?: Prisma.BudgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Budget
   */
  omit?: Prisma.BudgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetInclude<ExtArgs> | null
}
