
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TripDay` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TripDay
 * 
 */
export type TripDayModel = runtime.Types.Result.DefaultSelection<Prisma.$TripDayPayload>

export type AggregateTripDay = {
  _count: TripDayCountAggregateOutputType | null
  _avg: TripDayAvgAggregateOutputType | null
  _sum: TripDaySumAggregateOutputType | null
  _min: TripDayMinAggregateOutputType | null
  _max: TripDayMaxAggregateOutputType | null
}

export type TripDayAvgAggregateOutputType = {
  id: number | null
  tripId: number | null
}

export type TripDaySumAggregateOutputType = {
  id: number | null
  tripId: number | null
}

export type TripDayMinAggregateOutputType = {
  id: number | null
  date: Date | null
  title: string | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
  tripId: number | null
}

export type TripDayMaxAggregateOutputType = {
  id: number | null
  date: Date | null
  title: string | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
  tripId: number | null
}

export type TripDayCountAggregateOutputType = {
  id: number
  date: number
  title: number
  notes: number
  createdAt: number
  updatedAt: number
  tripId: number
  _all: number
}


export type TripDayAvgAggregateInputType = {
  id?: true
  tripId?: true
}

export type TripDaySumAggregateInputType = {
  id?: true
  tripId?: true
}

export type TripDayMinAggregateInputType = {
  id?: true
  date?: true
  title?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
  tripId?: true
}

export type TripDayMaxAggregateInputType = {
  id?: true
  date?: true
  title?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
  tripId?: true
}

export type TripDayCountAggregateInputType = {
  id?: true
  date?: true
  title?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
  tripId?: true
  _all?: true
}

export type TripDayAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TripDay to aggregate.
   */
  where?: Prisma.TripDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TripDays to fetch.
   */
  orderBy?: Prisma.TripDayOrderByWithRelationInput | Prisma.TripDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TripDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TripDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TripDays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TripDays
  **/
  _count?: true | TripDayCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TripDayAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TripDaySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TripDayMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TripDayMaxAggregateInputType
}

export type GetTripDayAggregateType<T extends TripDayAggregateArgs> = {
      [P in keyof T & keyof AggregateTripDay]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTripDay[P]>
    : Prisma.GetScalarType<T[P], AggregateTripDay[P]>
}




export type TripDayGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TripDayWhereInput
  orderBy?: Prisma.TripDayOrderByWithAggregationInput | Prisma.TripDayOrderByWithAggregationInput[]
  by: Prisma.TripDayScalarFieldEnum[] | Prisma.TripDayScalarFieldEnum
  having?: Prisma.TripDayScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TripDayCountAggregateInputType | true
  _avg?: TripDayAvgAggregateInputType
  _sum?: TripDaySumAggregateInputType
  _min?: TripDayMinAggregateInputType
  _max?: TripDayMaxAggregateInputType
}

export type TripDayGroupByOutputType = {
  id: number
  date: Date
  title: string | null
  notes: string | null
  createdAt: Date
  updatedAt: Date
  tripId: number
  _count: TripDayCountAggregateOutputType | null
  _avg: TripDayAvgAggregateOutputType | null
  _sum: TripDaySumAggregateOutputType | null
  _min: TripDayMinAggregateOutputType | null
  _max: TripDayMaxAggregateOutputType | null
}

type GetTripDayGroupByPayload<T extends TripDayGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TripDayGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TripDayGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TripDayGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TripDayGroupByOutputType[P]>
      }
    >
  >



export type TripDayWhereInput = {
  AND?: Prisma.TripDayWhereInput | Prisma.TripDayWhereInput[]
  OR?: Prisma.TripDayWhereInput[]
  NOT?: Prisma.TripDayWhereInput | Prisma.TripDayWhereInput[]
  id?: Prisma.IntFilter<"TripDay"> | number
  date?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  title?: Prisma.StringNullableFilter<"TripDay"> | string | null
  notes?: Prisma.StringNullableFilter<"TripDay"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  tripId?: Prisma.IntFilter<"TripDay"> | number
  trip?: Prisma.XOR<Prisma.TripScalarRelationFilter, Prisma.TripWhereInput>
  activities?: Prisma.ActivityListRelationFilter
}

export type TripDayOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
  trip?: Prisma.TripOrderByWithRelationInput
  activities?: Prisma.ActivityOrderByRelationAggregateInput
}

export type TripDayWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TripDayWhereInput | Prisma.TripDayWhereInput[]
  OR?: Prisma.TripDayWhereInput[]
  NOT?: Prisma.TripDayWhereInput | Prisma.TripDayWhereInput[]
  date?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  title?: Prisma.StringNullableFilter<"TripDay"> | string | null
  notes?: Prisma.StringNullableFilter<"TripDay"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  tripId?: Prisma.IntFilter<"TripDay"> | number
  trip?: Prisma.XOR<Prisma.TripScalarRelationFilter, Prisma.TripWhereInput>
  activities?: Prisma.ActivityListRelationFilter
}, "id">

export type TripDayOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
  _count?: Prisma.TripDayCountOrderByAggregateInput
  _avg?: Prisma.TripDayAvgOrderByAggregateInput
  _max?: Prisma.TripDayMaxOrderByAggregateInput
  _min?: Prisma.TripDayMinOrderByAggregateInput
  _sum?: Prisma.TripDaySumOrderByAggregateInput
}

export type TripDayScalarWhereWithAggregatesInput = {
  AND?: Prisma.TripDayScalarWhereWithAggregatesInput | Prisma.TripDayScalarWhereWithAggregatesInput[]
  OR?: Prisma.TripDayScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TripDayScalarWhereWithAggregatesInput | Prisma.TripDayScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TripDay"> | number
  date?: Prisma.DateTimeWithAggregatesFilter<"TripDay"> | Date | string
  title?: Prisma.StringNullableWithAggregatesFilter<"TripDay"> | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"TripDay"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TripDay"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TripDay"> | Date | string
  tripId?: Prisma.IntWithAggregatesFilter<"TripDay"> | number
}

export type TripDayCreateInput = {
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  trip: Prisma.TripCreateNestedOneWithoutDaysInput
  activities?: Prisma.ActivityCreateNestedManyWithoutDayInput
}

export type TripDayUncheckedCreateInput = {
  id?: number
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  tripId: number
  activities?: Prisma.ActivityUncheckedCreateNestedManyWithoutDayInput
}

export type TripDayUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  trip?: Prisma.TripUpdateOneRequiredWithoutDaysNestedInput
  activities?: Prisma.ActivityUpdateManyWithoutDayNestedInput
}

export type TripDayUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tripId?: Prisma.IntFieldUpdateOperationsInput | number
  activities?: Prisma.ActivityUncheckedUpdateManyWithoutDayNestedInput
}

export type TripDayCreateManyInput = {
  id?: number
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  tripId: number
}

export type TripDayUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TripDayUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tripId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TripDayListRelationFilter = {
  every?: Prisma.TripDayWhereInput
  some?: Prisma.TripDayWhereInput
  none?: Prisma.TripDayWhereInput
}

export type TripDayOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TripDayCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  title?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
}

export type TripDayAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
}

export type TripDayMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  title?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
}

export type TripDayMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  title?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
}

export type TripDaySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tripId?: Prisma.SortOrder
}

export type TripDayScalarRelationFilter = {
  is?: Prisma.TripDayWhereInput
  isNot?: Prisma.TripDayWhereInput
}

export type TripDayCreateNestedManyWithoutTripInput = {
  create?: Prisma.XOR<Prisma.TripDayCreateWithoutTripInput, Prisma.TripDayUncheckedCreateWithoutTripInput> | Prisma.TripDayCreateWithoutTripInput[] | Prisma.TripDayUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.TripDayCreateOrConnectWithoutTripInput | Prisma.TripDayCreateOrConnectWithoutTripInput[]
  createMany?: Prisma.TripDayCreateManyTripInputEnvelope
  connect?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
}

export type TripDayUncheckedCreateNestedManyWithoutTripInput = {
  create?: Prisma.XOR<Prisma.TripDayCreateWithoutTripInput, Prisma.TripDayUncheckedCreateWithoutTripInput> | Prisma.TripDayCreateWithoutTripInput[] | Prisma.TripDayUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.TripDayCreateOrConnectWithoutTripInput | Prisma.TripDayCreateOrConnectWithoutTripInput[]
  createMany?: Prisma.TripDayCreateManyTripInputEnvelope
  connect?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
}

export type TripDayUpdateManyWithoutTripNestedInput = {
  create?: Prisma.XOR<Prisma.TripDayCreateWithoutTripInput, Prisma.TripDayUncheckedCreateWithoutTripInput> | Prisma.TripDayCreateWithoutTripInput[] | Prisma.TripDayUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.TripDayCreateOrConnectWithoutTripInput | Prisma.TripDayCreateOrConnectWithoutTripInput[]
  upsert?: Prisma.TripDayUpsertWithWhereUniqueWithoutTripInput | Prisma.TripDayUpsertWithWhereUniqueWithoutTripInput[]
  createMany?: Prisma.TripDayCreateManyTripInputEnvelope
  set?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  disconnect?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  delete?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  connect?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  update?: Prisma.TripDayUpdateWithWhereUniqueWithoutTripInput | Prisma.TripDayUpdateWithWhereUniqueWithoutTripInput[]
  updateMany?: Prisma.TripDayUpdateManyWithWhereWithoutTripInput | Prisma.TripDayUpdateManyWithWhereWithoutTripInput[]
  deleteMany?: Prisma.TripDayScalarWhereInput | Prisma.TripDayScalarWhereInput[]
}

export type TripDayUncheckedUpdateManyWithoutTripNestedInput = {
  create?: Prisma.XOR<Prisma.TripDayCreateWithoutTripInput, Prisma.TripDayUncheckedCreateWithoutTripInput> | Prisma.TripDayCreateWithoutTripInput[] | Prisma.TripDayUncheckedCreateWithoutTripInput[]
  connectOrCreate?: Prisma.TripDayCreateOrConnectWithoutTripInput | Prisma.TripDayCreateOrConnectWithoutTripInput[]
  upsert?: Prisma.TripDayUpsertWithWhereUniqueWithoutTripInput | Prisma.TripDayUpsertWithWhereUniqueWithoutTripInput[]
  createMany?: Prisma.TripDayCreateManyTripInputEnvelope
  set?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  disconnect?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  delete?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  connect?: Prisma.TripDayWhereUniqueInput | Prisma.TripDayWhereUniqueInput[]
  update?: Prisma.TripDayUpdateWithWhereUniqueWithoutTripInput | Prisma.TripDayUpdateWithWhereUniqueWithoutTripInput[]
  updateMany?: Prisma.TripDayUpdateManyWithWhereWithoutTripInput | Prisma.TripDayUpdateManyWithWhereWithoutTripInput[]
  deleteMany?: Prisma.TripDayScalarWhereInput | Prisma.TripDayScalarWhereInput[]
}

export type TripDayCreateNestedOneWithoutActivitiesInput = {
  create?: Prisma.XOR<Prisma.TripDayCreateWithoutActivitiesInput, Prisma.TripDayUncheckedCreateWithoutActivitiesInput>
  connectOrCreate?: Prisma.TripDayCreateOrConnectWithoutActivitiesInput
  connect?: Prisma.TripDayWhereUniqueInput
}

export type TripDayUpdateOneRequiredWithoutActivitiesNestedInput = {
  create?: Prisma.XOR<Prisma.TripDayCreateWithoutActivitiesInput, Prisma.TripDayUncheckedCreateWithoutActivitiesInput>
  connectOrCreate?: Prisma.TripDayCreateOrConnectWithoutActivitiesInput
  upsert?: Prisma.TripDayUpsertWithoutActivitiesInput
  connect?: Prisma.TripDayWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TripDayUpdateToOneWithWhereWithoutActivitiesInput, Prisma.TripDayUpdateWithoutActivitiesInput>, Prisma.TripDayUncheckedUpdateWithoutActivitiesInput>
}

export type TripDayCreateWithoutTripInput = {
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  activities?: Prisma.ActivityCreateNestedManyWithoutDayInput
}

export type TripDayUncheckedCreateWithoutTripInput = {
  id?: number
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  activities?: Prisma.ActivityUncheckedCreateNestedManyWithoutDayInput
}

export type TripDayCreateOrConnectWithoutTripInput = {
  where: Prisma.TripDayWhereUniqueInput
  create: Prisma.XOR<Prisma.TripDayCreateWithoutTripInput, Prisma.TripDayUncheckedCreateWithoutTripInput>
}

export type TripDayCreateManyTripInputEnvelope = {
  data: Prisma.TripDayCreateManyTripInput | Prisma.TripDayCreateManyTripInput[]
  skipDuplicates?: boolean
}

export type TripDayUpsertWithWhereUniqueWithoutTripInput = {
  where: Prisma.TripDayWhereUniqueInput
  update: Prisma.XOR<Prisma.TripDayUpdateWithoutTripInput, Prisma.TripDayUncheckedUpdateWithoutTripInput>
  create: Prisma.XOR<Prisma.TripDayCreateWithoutTripInput, Prisma.TripDayUncheckedCreateWithoutTripInput>
}

export type TripDayUpdateWithWhereUniqueWithoutTripInput = {
  where: Prisma.TripDayWhereUniqueInput
  data: Prisma.XOR<Prisma.TripDayUpdateWithoutTripInput, Prisma.TripDayUncheckedUpdateWithoutTripInput>
}

export type TripDayUpdateManyWithWhereWithoutTripInput = {
  where: Prisma.TripDayScalarWhereInput
  data: Prisma.XOR<Prisma.TripDayUpdateManyMutationInput, Prisma.TripDayUncheckedUpdateManyWithoutTripInput>
}

export type TripDayScalarWhereInput = {
  AND?: Prisma.TripDayScalarWhereInput | Prisma.TripDayScalarWhereInput[]
  OR?: Prisma.TripDayScalarWhereInput[]
  NOT?: Prisma.TripDayScalarWhereInput | Prisma.TripDayScalarWhereInput[]
  id?: Prisma.IntFilter<"TripDay"> | number
  date?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  title?: Prisma.StringNullableFilter<"TripDay"> | string | null
  notes?: Prisma.StringNullableFilter<"TripDay"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TripDay"> | Date | string
  tripId?: Prisma.IntFilter<"TripDay"> | number
}

export type TripDayCreateWithoutActivitiesInput = {
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  trip: Prisma.TripCreateNestedOneWithoutDaysInput
}

export type TripDayUncheckedCreateWithoutActivitiesInput = {
  id?: number
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  tripId: number
}

export type TripDayCreateOrConnectWithoutActivitiesInput = {
  where: Prisma.TripDayWhereUniqueInput
  create: Prisma.XOR<Prisma.TripDayCreateWithoutActivitiesInput, Prisma.TripDayUncheckedCreateWithoutActivitiesInput>
}

export type TripDayUpsertWithoutActivitiesInput = {
  update: Prisma.XOR<Prisma.TripDayUpdateWithoutActivitiesInput, Prisma.TripDayUncheckedUpdateWithoutActivitiesInput>
  create: Prisma.XOR<Prisma.TripDayCreateWithoutActivitiesInput, Prisma.TripDayUncheckedCreateWithoutActivitiesInput>
  where?: Prisma.TripDayWhereInput
}

export type TripDayUpdateToOneWithWhereWithoutActivitiesInput = {
  where?: Prisma.TripDayWhereInput
  data: Prisma.XOR<Prisma.TripDayUpdateWithoutActivitiesInput, Prisma.TripDayUncheckedUpdateWithoutActivitiesInput>
}

export type TripDayUpdateWithoutActivitiesInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  trip?: Prisma.TripUpdateOneRequiredWithoutDaysNestedInput
}

export type TripDayUncheckedUpdateWithoutActivitiesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tripId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TripDayCreateManyTripInput = {
  id?: number
  date: Date | string
  title?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TripDayUpdateWithoutTripInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activities?: Prisma.ActivityUpdateManyWithoutDayNestedInput
}

export type TripDayUncheckedUpdateWithoutTripInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activities?: Prisma.ActivityUncheckedUpdateManyWithoutDayNestedInput
}

export type TripDayUncheckedUpdateManyWithoutTripInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TripDayCountOutputType
 */

export type TripDayCountOutputType = {
  activities: number
}

export type TripDayCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  activities?: boolean | TripDayCountOutputTypeCountActivitiesArgs
}

/**
 * TripDayCountOutputType without action
 */
export type TripDayCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDayCountOutputType
   */
  select?: Prisma.TripDayCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TripDayCountOutputType without action
 */
export type TripDayCountOutputTypeCountActivitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActivityWhereInput
}


export type TripDaySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  title?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
  trip?: boolean | Prisma.TripDefaultArgs<ExtArgs>
  activities?: boolean | Prisma.TripDay$activitiesArgs<ExtArgs>
  _count?: boolean | Prisma.TripDayCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tripDay"]>

export type TripDaySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  title?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
  trip?: boolean | Prisma.TripDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tripDay"]>

export type TripDaySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  title?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
  trip?: boolean | Prisma.TripDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tripDay"]>

export type TripDaySelectScalar = {
  id?: boolean
  date?: boolean
  title?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tripId?: boolean
}

export type TripDayOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "date" | "title" | "notes" | "createdAt" | "updatedAt" | "tripId", ExtArgs["result"]["tripDay"]>
export type TripDayInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trip?: boolean | Prisma.TripDefaultArgs<ExtArgs>
  activities?: boolean | Prisma.TripDay$activitiesArgs<ExtArgs>
  _count?: boolean | Prisma.TripDayCountOutputTypeDefaultArgs<ExtArgs>
}
export type TripDayIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trip?: boolean | Prisma.TripDefaultArgs<ExtArgs>
}
export type TripDayIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trip?: boolean | Prisma.TripDefaultArgs<ExtArgs>
}

export type $TripDayPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TripDay"
  objects: {
    trip: Prisma.$TripPayload<ExtArgs>
    activities: Prisma.$ActivityPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    date: Date
    title: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    tripId: number
  }, ExtArgs["result"]["tripDay"]>
  composites: {}
}

export type TripDayGetPayload<S extends boolean | null | undefined | TripDayDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TripDayPayload, S>

export type TripDayCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TripDayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TripDayCountAggregateInputType | true
  }

export interface TripDayDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TripDay'], meta: { name: 'TripDay' } }
  /**
   * Find zero or one TripDay that matches the filter.
   * @param {TripDayFindUniqueArgs} args - Arguments to find a TripDay
   * @example
   * // Get one TripDay
   * const tripDay = await prisma.tripDay.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TripDayFindUniqueArgs>(args: Prisma.SelectSubset<T, TripDayFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TripDay that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TripDayFindUniqueOrThrowArgs} args - Arguments to find a TripDay
   * @example
   * // Get one TripDay
   * const tripDay = await prisma.tripDay.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TripDayFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TripDayFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TripDay that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TripDayFindFirstArgs} args - Arguments to find a TripDay
   * @example
   * // Get one TripDay
   * const tripDay = await prisma.tripDay.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TripDayFindFirstArgs>(args?: Prisma.SelectSubset<T, TripDayFindFirstArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TripDay that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TripDayFindFirstOrThrowArgs} args - Arguments to find a TripDay
   * @example
   * // Get one TripDay
   * const tripDay = await prisma.tripDay.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TripDayFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TripDayFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TripDays that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TripDayFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TripDays
   * const tripDays = await prisma.tripDay.findMany()
   * 
   * // Get first 10 TripDays
   * const tripDays = await prisma.tripDay.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tripDayWithIdOnly = await prisma.tripDay.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TripDayFindManyArgs>(args?: Prisma.SelectSubset<T, TripDayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TripDay.
   * @param {TripDayCreateArgs} args - Arguments to create a TripDay.
   * @example
   * // Create one TripDay
   * const TripDay = await prisma.tripDay.create({
   *   data: {
   *     // ... data to create a TripDay
   *   }
   * })
   * 
   */
  create<T extends TripDayCreateArgs>(args: Prisma.SelectSubset<T, TripDayCreateArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TripDays.
   * @param {TripDayCreateManyArgs} args - Arguments to create many TripDays.
   * @example
   * // Create many TripDays
   * const tripDay = await prisma.tripDay.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TripDayCreateManyArgs>(args?: Prisma.SelectSubset<T, TripDayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TripDays and returns the data saved in the database.
   * @param {TripDayCreateManyAndReturnArgs} args - Arguments to create many TripDays.
   * @example
   * // Create many TripDays
   * const tripDay = await prisma.tripDay.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TripDays and only return the `id`
   * const tripDayWithIdOnly = await prisma.tripDay.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TripDayCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TripDayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TripDay.
   * @param {TripDayDeleteArgs} args - Arguments to delete one TripDay.
   * @example
   * // Delete one TripDay
   * const TripDay = await prisma.tripDay.delete({
   *   where: {
   *     // ... filter to delete one TripDay
   *   }
   * })
   * 
   */
  delete<T extends TripDayDeleteArgs>(args: Prisma.SelectSubset<T, TripDayDeleteArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TripDay.
   * @param {TripDayUpdateArgs} args - Arguments to update one TripDay.
   * @example
   * // Update one TripDay
   * const tripDay = await prisma.tripDay.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TripDayUpdateArgs>(args: Prisma.SelectSubset<T, TripDayUpdateArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TripDays.
   * @param {TripDayDeleteManyArgs} args - Arguments to filter TripDays to delete.
   * @example
   * // Delete a few TripDays
   * const { count } = await prisma.tripDay.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TripDayDeleteManyArgs>(args?: Prisma.SelectSubset<T, TripDayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TripDays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TripDayUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TripDays
   * const tripDay = await prisma.tripDay.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TripDayUpdateManyArgs>(args: Prisma.SelectSubset<T, TripDayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TripDays and returns the data updated in the database.
   * @param {TripDayUpdateManyAndReturnArgs} args - Arguments to update many TripDays.
   * @example
   * // Update many TripDays
   * const tripDay = await prisma.tripDay.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TripDays and only return the `id`
   * const tripDayWithIdOnly = await prisma.tripDay.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TripDayUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TripDayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TripDay.
   * @param {TripDayUpsertArgs} args - Arguments to update or create a TripDay.
   * @example
   * // Update or create a TripDay
   * const tripDay = await prisma.tripDay.upsert({
   *   create: {
   *     // ... data to create a TripDay
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TripDay we want to update
   *   }
   * })
   */
  upsert<T extends TripDayUpsertArgs>(args: Prisma.SelectSubset<T, TripDayUpsertArgs<ExtArgs>>): Prisma.Prisma__TripDayClient<runtime.Types.Result.GetResult<Prisma.$TripDayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TripDays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TripDayCountArgs} args - Arguments to filter TripDays to count.
   * @example
   * // Count the number of TripDays
   * const count = await prisma.tripDay.count({
   *   where: {
   *     // ... the filter for the TripDays we want to count
   *   }
   * })
  **/
  count<T extends TripDayCountArgs>(
    args?: Prisma.Subset<T, TripDayCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TripDayCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TripDay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TripDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TripDayAggregateArgs>(args: Prisma.Subset<T, TripDayAggregateArgs>): Prisma.PrismaPromise<GetTripDayAggregateType<T>>

  /**
   * Group by TripDay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TripDayGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TripDayGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TripDayGroupByArgs['orderBy'] }
      : { orderBy?: TripDayGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TripDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTripDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TripDay model
 */
readonly fields: TripDayFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TripDay.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TripDayClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  trip<T extends Prisma.TripDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TripDefaultArgs<ExtArgs>>): Prisma.Prisma__TripClient<runtime.Types.Result.GetResult<Prisma.$TripPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  activities<T extends Prisma.TripDay$activitiesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TripDay$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TripDay model
 */
export interface TripDayFieldRefs {
  readonly id: Prisma.FieldRef<"TripDay", 'Int'>
  readonly date: Prisma.FieldRef<"TripDay", 'DateTime'>
  readonly title: Prisma.FieldRef<"TripDay", 'String'>
  readonly notes: Prisma.FieldRef<"TripDay", 'String'>
  readonly createdAt: Prisma.FieldRef<"TripDay", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TripDay", 'DateTime'>
  readonly tripId: Prisma.FieldRef<"TripDay", 'Int'>
}
    

// Custom InputTypes
/**
 * TripDay findUnique
 */
export type TripDayFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * Filter, which TripDay to fetch.
   */
  where: Prisma.TripDayWhereUniqueInput
}

/**
 * TripDay findUniqueOrThrow
 */
export type TripDayFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * Filter, which TripDay to fetch.
   */
  where: Prisma.TripDayWhereUniqueInput
}

/**
 * TripDay findFirst
 */
export type TripDayFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * Filter, which TripDay to fetch.
   */
  where?: Prisma.TripDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TripDays to fetch.
   */
  orderBy?: Prisma.TripDayOrderByWithRelationInput | Prisma.TripDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TripDays.
   */
  cursor?: Prisma.TripDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TripDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TripDays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TripDays.
   */
  distinct?: Prisma.TripDayScalarFieldEnum | Prisma.TripDayScalarFieldEnum[]
}

/**
 * TripDay findFirstOrThrow
 */
export type TripDayFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * Filter, which TripDay to fetch.
   */
  where?: Prisma.TripDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TripDays to fetch.
   */
  orderBy?: Prisma.TripDayOrderByWithRelationInput | Prisma.TripDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TripDays.
   */
  cursor?: Prisma.TripDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TripDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TripDays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TripDays.
   */
  distinct?: Prisma.TripDayScalarFieldEnum | Prisma.TripDayScalarFieldEnum[]
}

/**
 * TripDay findMany
 */
export type TripDayFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * Filter, which TripDays to fetch.
   */
  where?: Prisma.TripDayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TripDays to fetch.
   */
  orderBy?: Prisma.TripDayOrderByWithRelationInput | Prisma.TripDayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TripDays.
   */
  cursor?: Prisma.TripDayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TripDays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TripDays.
   */
  skip?: number
  distinct?: Prisma.TripDayScalarFieldEnum | Prisma.TripDayScalarFieldEnum[]
}

/**
 * TripDay create
 */
export type TripDayCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * The data needed to create a TripDay.
   */
  data: Prisma.XOR<Prisma.TripDayCreateInput, Prisma.TripDayUncheckedCreateInput>
}

/**
 * TripDay createMany
 */
export type TripDayCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TripDays.
   */
  data: Prisma.TripDayCreateManyInput | Prisma.TripDayCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TripDay createManyAndReturn
 */
export type TripDayCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * The data used to create many TripDays.
   */
  data: Prisma.TripDayCreateManyInput | Prisma.TripDayCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TripDay update
 */
export type TripDayUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * The data needed to update a TripDay.
   */
  data: Prisma.XOR<Prisma.TripDayUpdateInput, Prisma.TripDayUncheckedUpdateInput>
  /**
   * Choose, which TripDay to update.
   */
  where: Prisma.TripDayWhereUniqueInput
}

/**
 * TripDay updateMany
 */
export type TripDayUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TripDays.
   */
  data: Prisma.XOR<Prisma.TripDayUpdateManyMutationInput, Prisma.TripDayUncheckedUpdateManyInput>
  /**
   * Filter which TripDays to update
   */
  where?: Prisma.TripDayWhereInput
  /**
   * Limit how many TripDays to update.
   */
  limit?: number
}

/**
 * TripDay updateManyAndReturn
 */
export type TripDayUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * The data used to update TripDays.
   */
  data: Prisma.XOR<Prisma.TripDayUpdateManyMutationInput, Prisma.TripDayUncheckedUpdateManyInput>
  /**
   * Filter which TripDays to update
   */
  where?: Prisma.TripDayWhereInput
  /**
   * Limit how many TripDays to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TripDay upsert
 */
export type TripDayUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * The filter to search for the TripDay to update in case it exists.
   */
  where: Prisma.TripDayWhereUniqueInput
  /**
   * In case the TripDay found by the `where` argument doesn't exist, create a new TripDay with this data.
   */
  create: Prisma.XOR<Prisma.TripDayCreateInput, Prisma.TripDayUncheckedCreateInput>
  /**
   * In case the TripDay was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TripDayUpdateInput, Prisma.TripDayUncheckedUpdateInput>
}

/**
 * TripDay delete
 */
export type TripDayDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
  /**
   * Filter which TripDay to delete.
   */
  where: Prisma.TripDayWhereUniqueInput
}

/**
 * TripDay deleteMany
 */
export type TripDayDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TripDays to delete
   */
  where?: Prisma.TripDayWhereInput
  /**
   * Limit how many TripDays to delete.
   */
  limit?: number
}

/**
 * TripDay.activities
 */
export type TripDay$activitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  where?: Prisma.ActivityWhereInput
  orderBy?: Prisma.ActivityOrderByWithRelationInput | Prisma.ActivityOrderByWithRelationInput[]
  cursor?: Prisma.ActivityWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ActivityScalarFieldEnum | Prisma.ActivityScalarFieldEnum[]
}

/**
 * TripDay without action
 */
export type TripDayDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TripDay
   */
  select?: Prisma.TripDaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TripDay
   */
  omit?: Prisma.TripDayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TripDayInclude<ExtArgs> | null
}
